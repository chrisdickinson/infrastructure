#!/bin/bash

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  echo "Run this script as a standalone. Do not source the script."
  exit 1
fi

op_domain=${ONEPASSWORD_DOMAIN:-my}
op_domain_replaced=${op_domain/1password.com//}
op_vault=${ONEPASSWORD_VAULT:-Personal}
op_item=${ONEPASSWORD_ITEM:-credentials.env}
signin=$(op signin $op_domain_replaced.1password.com)

if [ $result -gt 0 ]; then
  echo -e "\x1b[31mFailed to signin.\x1b[0m"
  echo "$signin"
else
  eval "$signin"

  template=$(python -c 'import json,sys; print(json.dumps({"notesPlain": sys.stdin.read(), "sections": [{"name": "linked items", "title": "Related Items"}]}))' <<EOF
export CLOUDFLARE_ZONE_ID=$CLOUDFLARE_ZONE_ID
export CLOUDFLARE_EMAIL=$CLOUDFLARE_EMAIL
export CLOUDFLARE_TOKEN=$CLOUDFLARE_TOKEN
export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-west-2}"
export TF_VAR_access_key="\$AWS_ACCESS_KEY_ID"
export TF_VAR_secret_key="\$AWS_SECRET_ACCESS_KEY"
export TF_VAR_site_access_key="${TF_VAR_access_key}"
export TF_VAR_site_secret_key="${TF_VAR_secret_key}"
export GITHUB_USERNAME="${GITHUB_USERNAME}"
EOF
)

  old_item=$(op get item --vault=${op_vault} ${op_item} .env)
  has_old_item=$?

  op create item 'Secure Note' $(echo "$template" | op encode) --title=$op_item
  if [ $has_old_item -eq 0 ]; then
    # delete the old item
    echo "deleting old item: ${old_item}"
    op delete item $(echo "$old_item" | jq '.uuid' -r)
  fi
  op signout ${op_domain_replaced}.1password.com
  eval "unset OP_SESSION_${op_domain_replaced}"
fi
