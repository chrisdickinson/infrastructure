#!/bin/bash

# note: direnv provides us some useful functions while running this
# script (notably: "has()"); you can see what functions are available
# here:
#
#   https://direnv.net/man/direnv-stdlib.1.html

function get_platform() {
  if [ "$OSTYPE" == "linux-gnu" ]; then
    echo linux
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo darwin
  elif [ "$OSTYPE" == "cygwin" ]; then
    echo windows
  elif [ "$OSTYPE" == "msys" ]; then
    echo windows
  elif [ "$OSTYPE" == "win32" ]; then
    echo windows
  else
    echo "Cannot detect OS" >&2
    exit 1
  fi
}

function get_arch() {
  case $(uname -m) in
    x86_64)
    echo amd64
  ;;
    i*86)
    echo 386
  ;;
  esac
}

# "bin" is for commands committed directly to this repo. ".bin" is
# for external assets downloaded later in this script.
PATH_add bin
if [ ! -e .bin ]; then
   mkdir -p .bin
fi
PATH_add .bin

# Prevents some oddball errors when running ansible.
# via https://rafpe.ninja/2018/02/24/ansible-error-nsplaceholderdate-initialize-may-have-been-in-progress-in-another-thread-when-fork-was-called/
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

ANSIBLE_VERSION="2.8.3"
TERRAFORM_VERSION="0.12.21"
PACKER_VERSION="1.4.2"
ONEPASSWORD_VERSION="0.5.7"
JQ_VERSION="1.6"

plat=$(get_platform)
arch=$(get_arch)

# install ansible
layout python3
if has ansible && [ "$(ansible --version | head -n1 | awk '{print $2}')" = "$ANSIBLE_VERSION" ]; then

  log_status "ansible $ANSIBLE_VERSION activated."
else
  log_status "installing ansible @ $ANSIBLE_VERSION + awscli"
  pip install botocore boto3 paramiko awscli "ansible==${ANSIBLE_VERSION}"
fi

# install terraform
if has terraform && [ "$(terraform version | head -n1)" = "Terraform v$TERRAFORM_VERSION" ]; then
  log_status "terraform $TERRAFORM_VERSION activated."
else
  log_status "installing terraform @ $TERRAFORM_VERSION."
  curl -#o .bin/terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_${plat}_${arch}.zip
  unzip -qo .bin/terraform.zip -d .bin
  rm .bin/terraform.zip
fi

# install packer
if has packer && [ "$(packer -v)" = "$PACKER_VERSION" ]; then
  log_status "packer $PACKER_VERSION activated."
else
  log_status "installing packer @ $PACKER_VERSION."
  curl -#o .bin/packer.zip https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_${plat}_${arch}.zip
  unzip -qo .bin/packer.zip -d .bin
  rm .bin/packer.zip
fi

# install onepassword
if has op && [ "$(op -v)" = "$ONEPASSWORD_VERSION" ]; then
  log_status "onepassword $ONEPASSWORD_VERSION activated."
else
  log_status "installing onepassword @ $ONEPASSWORD_VERSION."
  curl -#o .bin/onepassword.zip https://cache.agilebits.com/dist/1P/op/pkg/v${ONEPASSWORD_VERSION}/op_${plat}_${arch}_v${ONEPASSWORD_VERSION}.zip
  unzip -qo .bin/onepassword.zip -d .bin
fi

# install jq
if has jq && [ "$(jq --version)" = "jq-${JQ_VERSION}" ]; then
  log_status "jq $JQ_VERSION activated."
else
  curl -sL $(curl -s https://api.github.com/repos/stedolan/jq/releases/tags/jq-${JQ_VERSION} \
  | grep "browser_download_url.*${plat/darwin/osx}-${arch}" \
  | cut -d : -f 2,3 \
  | tr -d \") > .bin/jq
  chmod +x .bin/jq
fi
